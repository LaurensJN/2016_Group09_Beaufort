    def calculateAllRoutes(self):
        incidents = self.getAllIncidents()
        incidentlayer = uf.getLegendLayerByName(self.iface,"roadblocks")
        incidentlayer.setSelectedFeatures([sid for sid in uf.getAllFeatures(incidentlayer)])
        incidents = incidentlayer.selectedFeatures()
        carlayer = uf.getLegendLayerByName(self.iface, "firetrucks")
        car = carlayer.selectedFeatures()
        #cartuple = (car[0].geometry().asPoint().x(),car[0].geometry().asPoint().y(),0)
        cargeom = car[0].geometry()
        if car == []:
            print 'no selected car'
            return
        carpoint = QgsPoint(cargeom.asPoint())

        for incident in incidents:
            attributes = ['id']
            #incidenttuple = (incident.geometry().asPoint().x(),incident.geometry().asPoint().y(),0)
            incidentgeom = incident.geometry()
            incidentpoint = QgsPoint(incidentgeom.asPoint())
            duo = [incidentgeom,cargeom]
            #voeg selected brandweerauto en id aan lijst toe
            types = [QtCore.QVariant.String]
            templayer = uf.getLegendLayerByName(self.iface, "temp")
            self.deleteTempFeat()
            if not templayer:
                templayer = uf.createTempLayer('temp','POINT',carlayer.crs().postgisSrid(),attributes,types)
                uf.loadTempLayer(templayer)
            uf.insertTempFeaturesGeom(templayer, duo, [[0,0],[0,0]])
            #templayer = uf.getLegendLayerByName(self.iface, templayer)
            self.calculateRoute()
        routes = uf.getLegendLayerByName(self.iface, "Routes")
        provider = routes.dataProvider()
        features = provider.getFeatures()
        routes.startEditing()
        dist = []
        for feature in features:
            geom = feature.geometry()
            routes.changeAttributeValue(feature.id(),1,geom.length())
            dist.append(geom.length)
        uf.addFields(routes,['importance'],[QtCore.QVariant.Double])
        dist.sort(reverse=True)
        maxdist = dist[0]
        print 'test1'
        for feature in features:
            geom = feature.geometry()
            lnth = geom.length()
            print lnth
            routes.changeAttributeValue(feature.id(),2,100-(lnth/maxdist)*100)
        print 'test2'
        routes.commitChanges()

    def calculateRoute(self):
        # origin and destination must be in the set of tied_points
        layer = uf.getLegendLayerByName(self.iface, "temp")
        selected_sources = layer.getFeatures()
        source_points = [feature.geometry().asPoint() for feature in selected_sources]
        self.buildNetwork(source_points)
        options = len(self.tied_points)
        if options > 1:
            # origin and destination are given as an index in the tied_points list
            origin = 0
            destination = random.randint(1,options-1)
            # calculate the shortest path for the given origin and destination
            path = uf.calculateRouteDijkstra(self.graph, self.tied_points, origin, destination)
            # store the route results in temporary layer called "Routes"
            routes_layer = uf.getLegendLayerByName(self.iface, "Routes")
            # create one if it doesn't exist
            if not routes_layer:
                attribs = ['id','length']
                types = [QtCore.QVariant.String,QtCore.QVariant.Double]
                routes_layer = uf.createTempLayer('Routes','LINESTRING',layer.crs().postgisSrid(), attribs, types)
                uf.loadTempLayer(routes_layer)
            # insert route line
            lastid = 0
            for route in routes_layer.getFeatures():
                lastid = route.id()
            uf.insertTempFeatures(routes_layer, [path], [[lastid,1]])
            #buffer = processing.runandload('qgis:fixeddistancebuffer',routes_layer,10.0,5,False,None)
            #self.refreshCanvas(routes_layer)